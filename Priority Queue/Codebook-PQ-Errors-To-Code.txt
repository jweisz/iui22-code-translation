```
Translation Error: Need to append to extend the heap for the new item.
```
      PriorityQueue-1-Better.py:23:23 -> self.heap[index] = item


```
Translation Error: Incorrect arguments in method call
```
      PriorityQueue-1-Better.py:42:42 -> self._heapify(self.heap, len(self.heap))
       PriorityQueue-5-Worse.py:93:93 -> self._heapify(self.heap)
       PriorityQueue-2-Worse.py:94:94 -> self._siftup_max(heap, max_index)
       PriorityQueue-1-Worse.py:95:95 -> _siftup_max(self.heap, max_index)
       PriorityQueue-3-Worse.py:95:95 -> self._siftup_max(self.heap, max_index)
       PriorityQueue-4-Worse.py:96:96 -> self._heapify(self.heap, 0, max_index)


```
Language Error: Incorrect way to check for empty list (Python list does not have an `empty()` method)
```
       PriorityQueue-1-Worse.py:60:60 -> return self.heap.empty()
      PriorityQueue-1-Better.py:51:51 -> if not self.heap.empty():
      PriorityQueue-2-Better.py:51:51 -> if not self.heap.empty():
      PriorityQueue-4-Better.py:51:51 -> if not self.heap.empty():
       PriorityQueue-2-Worse.py:51:51 -> if not self.heap.empty():
       PriorityQueue-3-Worse.py:51:51 -> if not self.heap.empty():
       PriorityQueue-5-Worse.py:51:51 -> if not self.heap.empty():
       PriorityQueue-4-Worse.py:61:61 -> return self.heap.empty()
       PriorityQueue-1-Worse.py:52:52 -> if not self.heap.empty():
       PriorityQueue-4-Worse.py:53:53 -> if not self.heap.empty():
      PriorityQueue-1-Better.py:65:65 -> while not self.heap.empty():
      PriorityQueue-2-Better.py:65:65 -> while not self.heap.empty():
       PriorityQueue-2-Worse.py:65:65 -> while not self.heap.empty():
       PriorityQueue-3-Worse.py:65:65 -> while not self.heap.empty():
       PriorityQueue-5-Worse.py:65:65 -> while not self.heap.empty():
      PriorityQueue-3-Better.py:66:66 -> results.append(self.remove())
       PriorityQueue-1-Worse.py:66:66 -> while not self.heap.empty():
       PriorityQueue-4-Worse.py:67:67 -> while not self.heap.empty():
       PriorityQueue-5-Worse.py:59:59 -> return self.heap.Empty()
      PriorityQueue-1-Better.py:59:59 -> return self.heap.empty()
      PriorityQueue-2-Better.py:59:59 -> return self.heap.empty()
      PriorityQueue-4-Better.py:59:59 -> return self.heap.empty()
       PriorityQueue-2-Worse.py:59:59 -> return self.heap.empty()
      PriorityQueue-3-Better.py:59:59 -> return self.heap.is_empty()


```
Translation Error: Incorrect return object
```
       PriorityQueue-4-Worse.py:70:70 -> return [x for x in results if x["priority"] == 0]
      PriorityQueue-1-Better.py:52:52 -> return self.heap.pop()
      PriorityQueue-2-Better.py:52:52 -> return self.heap.pop()
       PriorityQueue-1-Worse.py:44:44 -> return None
       PriorityQueue-2-Worse.py:54:54 -> return self.heap.pop()
       PriorityQueue-5-Worse.py:54:54 -> return self.heap.pop()
       PriorityQueue-1-Worse.py:55:55 -> return self.heap.pop()
       PriorityQueue-2-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-3-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-5-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-1-Worse.py:69:69 -> return [x for x in results if x["priority "] == 0]


```
Translation Error: Did not correctly translate functionality from Java to Python
```
       PriorityQueue-1-Worse.py:40:40 -> element = self.heap[index]
       PriorityQueue-4-Worse.py:40:40 -> element = self.heap[index]
       PriorityQueue-5-Worse.py:40:40 -> self.heap[index] = element
      PriorityQueue-4-Better.py:41:41 -> self.heap[index] = element
       PriorityQueue-5-Worse.py:41:41 -> self.remove()
       PriorityQueue-4-Worse.py:22:22 -> index = heap.index(item)
       PriorityQueue-1-Worse.py:22:22 -> index = self.heap.index(item)
       PriorityQueue-2-Worse.py:22:22 -> index = self.heap.index(item)
       PriorityQueue-3-Worse.py:22:22 -> index = self.heap.index(item)
       PriorityQueue-5-Worse.py:22:22 -> index = self.heap.index(item)
       PriorityQueue-5-Worse.py:52:52 -> return heap.pop()
       PriorityQueue-2-Worse.py:52:52 -> return self.heap.pop()
       PriorityQueue-3-Worse.py:52:52 -> return self.heap.pop()
       PriorityQueue-4-Worse.py:43:43 -> self.remove()
       PriorityQueue-1-Worse.py:53:53 -> return self.heap.pop()
      PriorityQueue-4-Better.py:63:63 -> saved_heap = [self.heap]
       PriorityQueue-5-Worse.py:83:83 -> parent = self.heap.pop()
       PriorityQueue-1-Worse.py:93:93 -> self.heap[left_index] = self.heap[max_index]
       PriorityQueue-3-Worse.py:93:93 -> self.heap[left_index] = self.heap[max_index]
      PriorityQueue-1-Better.py:54:54 -> return self.heap.pop()
      PriorityQueue-5-Better.py:54:54 -> return self.heap.pop()
       PriorityQueue-5-Worse.py:84:84 -> maxIndex = heap.index(parent)
       PriorityQueue-2-Worse.py:84:84 -> parent = self.heap.pop()
       PriorityQueue-4-Worse.py:94:94 -> self.heap[left_index] = self.heap[max_index]
       PriorityQueue-2-Worse.py:85:85 -> max_index = heap.index(parent)
       PriorityQueue-1-Worse.py:85:85 -> parent = self.heap(pop)
       PriorityQueue-3-Worse.py:85:85 -> parent = self.heap.pop(index)
       PriorityQueue-1-Worse.py:26:26 -> parent = self.heap.pop()
       PriorityQueue-2-Worse.py:26:26 -> parent = self.heap.pop()
       PriorityQueue-3-Worse.py:26:26 -> parent = self.heap.pop()
       PriorityQueue-4-Worse.py:26:26 -> parent = self.heap.pop()
       PriorityQueue-5-Worse.py:26:26 -> parent = self.heap.pop()
       PriorityQueue-3-Worse.py:86:86 -> max_index = heap.index[parent]
       PriorityQueue-1-Worse.py:86:86 -> max_index = self.heap.index(parent)
       PriorityQueue-4-Worse.py:86:86 -> parent = self.heap.pop()
      PriorityQueue-3-Better.py:47:47 -> return len(cls.heap())
      PriorityQueue-5-Better.py:47:47 -> return len(self.heap[0])
       PriorityQueue-4-Worse.py:87:87 -> max_index = self.heap.index(parent)
       PriorityQueue-2-Worse.py:28:28 -> self.heap.insert(parentIndex, item)
       PriorityQueue-4-Worse.py:28:28 -> self.heap.insert(parent_index, item)
       PriorityQueue-5-Worse.py:28:28 -> self.heap.insert(parent_index, item)
       PriorityQueue-2-Worse.py:38:38 -> index = self.heap.index()
       PriorityQueue-5-Worse.py:38:38 -> index = self.heap.index()
       PriorityQueue-1-Worse.py:29:29 -> self.heap.insert(index, parent)
       PriorityQueue-2-Worse.py:29:29 -> self.heap.insert(index, parent)
       PriorityQueue-3-Worse.py:29:29 -> self.heap.insert(index, parent)
       PriorityQueue-4-Worse.py:29:29 -> self.heap.insert(index, parent)
       PriorityQueue-5-Worse.py:29:29 -> self.heap.insert(index, parent)
       PriorityQueue-2-Worse.py:39:39 -> element = self.heap[index]
       PriorityQueue-5-Worse.py:39:39 -> element = self.heap[index]
       PriorityQueue-4-Worse.py:39:39 -> index = self.heap.index()


```
Translation Error: Unnecessary deep copy (Java only creates a shallow copy)
```
      PriorityQueue-1-Better.py:63:63 -> saved_heap = copy.deepcopy(self.heap)
      PriorityQueue-5-Better.py:63:63 -> saved_heap = copy.deepcopy(self.heap)
       PriorityQueue-2-Worse.py:63:63 -> saved_heap = copy.deepcopy(self.heap)
       PriorityQueue-3-Worse.py:63:63 -> saved_heap = copy.deepcopy(self.heap)
       PriorityQueue-5-Worse.py:63:63 -> saved_heap = copy.deepcopy(self.heap)
      PriorityQueue-3-Better.py:63:63 -> saved_heap = deepcopy(self.heap)
       PriorityQueue-1-Worse.py:64:64 -> saved_heap = copy.deepcopy(self.heap)
       PriorityQueue-4-Worse.py:65:65 -> saved_heap = copy.deepcopy(self.heap)


```
Translation Error: Incorrect argument in method call (expected length of heap, not the heap itself)
```
       PriorityQueue-3-Worse.py:42:42 -> self._heapify(0, self.heap)
      PriorityQueue-2-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-3-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-4-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-5-Better.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-2-Worse.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-5-Worse.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-1-Worse.py:43:43 -> self.heapify(0, heap)
       PriorityQueue-4-Worse.py:44:44 -> self._heapify(self.heap)


```
Translation Error: Missing argument in method call
```
      PriorityQueue-2-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-3-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-4-Better.py:42:42 -> self._heapify(self.heap)
      PriorityQueue-5-Better.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-2-Worse.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-5-Worse.py:42:42 -> self._heapify(self.heap)
       PriorityQueue-4-Worse.py:44:44 -> self._heapify(self.heap)


```
Translation Error: List does not have a `keys()` method
```
      PriorityQueue-2-Better.py:47:47 -> return len(self.heap.keys())


```
Translation Error: Incorrect way to copy a Python object
```
      PriorityQueue-2-Better.py:63:63 -> saved_heap = copy.copy(self.heap)


```
Language Error: Floating point division (/) instead of integer division (//)
```
      PriorityQueue-3-Better.py:25:25 -> parent_index = (index - 1) / 2


```
No Error: This code actually works
```
       PriorityQueue-1-Worse.py:42:42 -> self.heap.pop(index)
       PriorityQueue-1-Worse.py:23:23 -> self.heap.insert(index, item)
       PriorityQueue-2-Worse.py:23:23 -> self.heap.insert(index, item)
       PriorityQueue-3-Worse.py:23:23 -> self.heap.insert(index, item)
       PriorityQueue-4-Worse.py:23:23 -> self.heap.insert(index, item)
       PriorityQueue-5-Worse.py:23:23 -> self.heap.insert(index, item)
       PriorityQueue-1-Worse.py:28:28 -> self.heap.insert(parent_index, item)
       PriorityQueue-3-Worse.py:28:28 -> self.heap.insert(parent_index, item)
      PriorityQueue-4-Better.py:28:28 -> self.heap[parentIndex] = item
      PriorityQueue-3-Better.py:28:28 -> self.heap[parent_index] = item


```
Translation Error: Incorrect index on lhs
```
      PriorityQueue-3-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]
      PriorityQueue-5-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]


```
Translation Error: Incorrect index on rhs
```
      PriorityQueue-3-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]
      PriorityQueue-5-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]


```
Spurious Error: Unnecessary `:`
```
      PriorityQueue-3-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]
      PriorityQueue-3-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]
      PriorityQueue-5-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]
      PriorityQueue-5-Better.py:40:40 -> self.heap[:index] = self.heap[index + 1 :]


```
Translation Error: Incorrect method signature (spurious argument)
```
      PriorityQueue-3-Better.py:45:45 -> def size(self, cls):


```
Spurious Error: Off the rails
```
      PriorityQueue-4-Better.py:76:84 -> """ Transform list into a heap , in - place , in O ( len ( x ) ) time . """\n        n = len(x)\n        #  Transform  bottom - up .  The  largest  index  there 's  any  point  to  looking  at\n        #  is  the  largest  with  a  child  index  in - range ,  so  must  have  2 * i  +  1  <  n ,\n        #  or  i  <  ( n - 1 ) / 2 .  If  n  is  even  =  2 * j ,  this  is  ( 2 * j - 1 ) / 2  =  j - 1/2  so\n        #  j - 1  is  the  largest ,  which  is  n / /2  -  1 .  If  n  is  odd  =  2 * j + 1 ,  this  is\n        #  ( 2 * j + 1-1 ) / 2  =  j  so  j - 1  is  the  largest ,  and  that 's  again  n / /2-1 .\n        for i in reversed(range(n // 2)):\n            _siftup(x, i)
      PriorityQueue-3-Better.py:77:84 -> n = len(x)\n        #  Transform  bottom - up .  The  largest  index  there 's  any  point  to  looking  at\n        #  is  the  largest  with  a  child  index  in - range ,  so  must  have  2 * i  +  1  <  n ,\n        #  or  i  <  ( n - 1 ) / 2 .  If  n  is  even  =  2 * j ,  this  is  ( 2 * j - 1 ) / 2  =  j - 1/2  so\n        #  j - 1  is  the  largest ,  which  is  n / /2  -  1 .  If  n  is  odd  =  2 * j + 1 ,  this  is\n        #  ( 2 * j + 1-1 ) / 2  =  j  so  j - 1  is  the  largest ,  and  that 's  again  n / /2-1 .\n        for i in reversed(range(n // 2)):\n            _siftup(x, i)


```
Code Omission Error (13 SLOC): Missing functionality in method implementation
```
      PriorityQueue-3-Better.py:80:93 -> if size > 0:\n            left_index = (index * 2) + 1\n            right_index = (index * 2) + 2\n            parent = self.heap[index]\n            max_index = index\n            if left_index < size and self.heap[left_index] > parent:\n                max_index = left_index\n            if right_index < size and self.heap[right_index] > self.heap[left_index]:\n                max_index = right_index\n            if max_index != index:\n                #  swap  them  and  recurse  on  the  subtree  rooted  at  min _ index  heap [ index ]\n                self.heap[index] = self.heap[max_index]\n                self.heap[max_index] = parent\n                self._heapify(max_index, size)


```
Translation Error: Instance member invoked as method
```
      PriorityQueue-4-Better.py:47:47 -> return len(self.heap())
       PriorityQueue-4-Worse.py:49:49 -> return len(self.heap())


```
Spurious Error: Instance member access does not use `()`
```
       PriorityQueue-3-Worse.py:47:47 -> return len(self.heap())


```
Language Error: Python list does not have a `get()` method, array lookup required
```
      PriorityQueue-4-Better.py:52:52 -> return self.heap.get(0)
       PriorityQueue-4-Worse.py:54:54 -> return self.heap.get(0)


```
Translation Error: Incorrect logic
```
       PriorityQueue-2-Worse.py:81:81 -> if heap:
       PriorityQueue-3-Worse.py:91:91 -> if max_index != left_index:
       PriorityQueue-1-Worse.py:82:82 -> if self.heap:
       PriorityQueue-4-Worse.py:92:92 -> if max_index != left_index:
      PriorityQueue-4-Better.py:65:65 -> while not self.heap:
      PriorityQueue-5-Better.py:65:65 -> while not self.heap:
       PriorityQueue-5-Worse.py:85:85 -> if leftIndex < leftIndex and self.heap[leftIndex] > parent:
       PriorityQueue-5-Worse.py:87:87 -> if rightIndex < rightIndex and self.heap[rightIndex] > parent:
       PriorityQueue-5-Worse.py:89:89 -> if maxIndex != leftIndex:


```
Translation Error: Incorrect method signature (missing and wrong arguments)
```
      PriorityQueue-4-Better.py:75:75 -> def _heapify(self, x):


```
Code Omission Error (15 SLOC): Missing functionality in method implementation
```
      PriorityQueue-4-Better.py:75:93 -> def _heapify(self, index, size):\n        """Restore  a  section  of  the  heap  to  maintain  heap  properties\n        index  -  the  point  in  the  heap  to  work  on\n        If  the  indicated  point  does  not  have  the  proper  relation  to  its  descendants ,\n        their  values  are  swapped  and  the  descendant  is  then  processed  recursively"""\n        if size > 0:\n            left_index = (index * 2) + 1\n            right_index = (index * 2) + 2\n            parent = self.heap[index]\n            max_index = index\n            if left_index < size and self.heap[left_index] > parent:\n                max_index = left_index\n            if right_index < size and self.heap[right_index] > self.heap[left_index]:\n                max_index = right_index\n            if max_index != index:\n                #  swap  them  and  recurse  on  the  subtree  rooted  at  min _ index  heap [ index ]\n                self.heap[index] = self.heap[max_index]\n                self.heap[max_index] = parent\n                self._heapify(max_index, size)


```
No Error: Equivalent code
```
      PriorityQueue-5-Better.py:41:41 -> self.heap.pop(index)


```
Translation Error: Typo in method name
```
       PriorityQueue-1-Worse.py:43:43 -> self.heapify(0, heap)


```
Language Error: References to instance members must use `self`
```
       PriorityQueue-4-Worse.py:22:22 -> index = heap.index(item)
       PriorityQueue-1-Worse.py:43:43 -> self.heapify(0, heap)


```
Spurious Error: Irrelevant code
```
       PriorityQueue-2-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-3-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-5-Worse.py:68:68 -> return [x for x in results if x["priority "] == 0]
       PriorityQueue-1-Worse.py:69:69 -> return [x for x in results if x["priority "] == 0]


```
Translation Error: Incorrect logic (expected comparison with `size`)
```
       PriorityQueue-4-Worse.py:90:90 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-2-Worse.py:86:86 -> if left_index < left_index and self.heap[left_index] > parent:
       PriorityQueue-1-Worse.py:87:87 -> if left_index < left_index and self.heap[left_index] > parent:
       PriorityQueue-3-Worse.py:87:87 -> if left_index < left_index and self.heap[left_index] > parent:
       PriorityQueue-4-Worse.py:88:88 -> if left_index < left_index and self.heap[left_index] > parent:
       PriorityQueue-2-Worse.py:88:88 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-1-Worse.py:89:89 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-3-Worse.py:89:89 -> if right_index < right_index and self.heap[right_index] > parent:


```
Translation Error: Incorrect logic (expected comparison with `self.heap[left_index]`)
```
       PriorityQueue-4-Worse.py:90:90 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-2-Worse.py:88:88 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-1-Worse.py:89:89 -> if right_index < right_index and self.heap[right_index] > parent:
       PriorityQueue-3-Worse.py:89:89 -> if right_index < right_index and self.heap[right_index] > parent:


```
Translation Error: Incorrect logic (expected comparison with `index`)
```
       PriorityQueue-2-Worse.py:90:90 -> if max_index != self.heap.index(parent):
       PriorityQueue-1-Worse.py:91:91 -> if max_index != self.heap.index(parent):


```
Translation Error: Incorrect translation of method call (expected `heapify()`)
```
       PriorityQueue-2-Worse.py:94:94 -> self._siftup_max(heap, max_index)
       PriorityQueue-1-Worse.py:95:95 -> _siftup_max(self.heap, max_index)
       PriorityQueue-3-Worse.py:95:95 -> self._siftup_max(self.heap, max_index)


```
Spurious Error: Method called that wasn't present in Python or Java
```
       PriorityQueue-2-Worse.py:94:94 -> self._siftup_max(heap, max_index)
       PriorityQueue-1-Worse.py:95:95 -> _siftup_max(self.heap, max_index)
       PriorityQueue-3-Worse.py:95:95 -> self._siftup_max(self.heap, max_index)


```
Language Error: Did not convert Java method to equivalent Python method
```
       PriorityQueue-2-Worse.py:41:41 -> self.heap.remove()


```
Spurious Error: Inclusion of irrelevant code
```
       PriorityQueue-4-Worse.py:70:70 -> return [x for x in results if x["priority"] == 0]


